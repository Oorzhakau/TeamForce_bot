import re

from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from data.config import ADMIN

from filters.filters_admin import IsAdmin
from keyboards.default.admin_menu import admin_menu
from keyboards.default.cancel_menu import cancel_menu
from keyboards.default.sub_menu import sub_menu
from keyboards.inline.callback_datas import tag_callback
from loader import dp
from states.state_tag import AddSubscribersToTag, TagState
from utils.db_api import db_commands as commands


@dp.message_handler(text="–°–ø–∏—Å–æ–∫ —Ç–µ–º üìÅ")
async def show_tags(message: Message):
    """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ç–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    tags = await commands.get_all_tags(message.from_user.id)
    menu = admin_menu if message.from_user.id == ADMIN else sub_menu
    if tags:
        for tag in tags:
            await message.answer(
                text=str(tag),
                reply_markup=menu,
            )
        return
    await message.answer(text="–°–ø–∏—Å–æ–∫ —Ç–µ–º –ø—É—Å—Ç!")


@dp.message_handler(text="–°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤ üìÅ")
async def show_subs(message: Message):
    """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤."""
    subs = await commands.get_all_subscribers()
    if subs:
        for sub in subs:
            await message.answer(
                "\n".join(
                    [
                        f"<b>User id:</b>{sub.user_id}",
                        f"<b>Username:</b>{sub.username}",
                        f"<b>First name:</b>{sub.first_name}",
                        f"<b>Last name:</b>{sub.last_name}",
                    ]
                )
            )
        return
    await message.answer(text="–ö–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤ –Ω–µ—Ç!")


@dp.message_handler(IsAdmin(), text="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É üìÅ")
async def add_tags(message: Message):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É."""
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã:")
    await TagState.tag.set()


@dp.message_handler(IsAdmin(), state=TagState.tag)
async def get_tag(message: Message, state: FSMContext):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ–º—ã."""
    tag_title = message.text
    pattern = re.compile("[A-–Ø–∞-—èA-z0-9@,.!? ]+")
    if not re.fullmatch(pattern, tag_title):
        await message.answer(
            "–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã "
            + "(–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ [A-–Ø–∞-—èA-z0-9@,.!?]). "
            + "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É "
            + "–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É.",
            reply_markup=cancel_menu,
        )
        return
    await state.finish()
    tag = await commands.get_or_create_tag(tag_title)
    if tag is None:
        await message.answer(text="–¢–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞.")
        return
    await message.answer("–¢–µ–º–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


@dp.callback_query_handler(tag_callback.filter(operation="delete"))
async def inline_tag_deletes(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    tag = call.message.text
    await commands.delete_tags(tag)
    await call.message.delete()


@dp.message_handler(IsAdmin(), text="–î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞(-–æ–≤) –≤ —Ç–µ–º—É")
async def add_subscribers_to_tag_initial(message: Message):
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã:")
    await AddSubscribersToTag.tag.set()


@dp.message_handler(IsAdmin(), state=AddSubscribersToTag.tag)
async def add_subscribers_to_tag_get_tag(message: Message, state: FSMContext):
    tag = message.text
    if not await commands.check_exist_tag(tag):
        await message.answer(
            "–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ç–µ–º–∞. "
            + "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É "
            + "–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É.",
            reply_markup=cancel_menu,
        )
        return
    await state.update_data({"tag": tag})
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ user_id –∫–æ—Ä—Ä–µ–∫—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤, "
        + "–∫—Ç–æ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º–µ  "
        + "(user_id1,user_id2,user_id3 –∏ —Ç.–¥.):"
    )
    await AddSubscribersToTag.next()


@dp.message_handler(IsAdmin(), state=AddSubscribersToTag.subscribers)
async def add_subscribers_to_tag_get_users_id(
    message: Message, state: FSMContext
):
    group = [int(user_id) for user_id in message.text.strip().split(",")]
    data = await state.get_data()
    for sub in group:
        if not await commands.check_exist_user_id(sub):
            await message.answer(
                f"{sub} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –±–æ—Ç–∞. "
                + "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É "
                + "–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É.",
                reply_markup=cancel_menu,
            )
            return
    tag = await commands.get_tag(data["tag"])
    group = await commands.get_subs_in_group_by_user_id(group)
    await commands.add_subscribers_to_tag(tag, group)
    for sub in group:
        await dp.bot.send_message(
            chat_id=sub.user_id,
            text="\n".join(
                [
                    f"<b>–û—Ç –∫–æ–≥–æ</b>: {message.from_user.username}",
                    f"<pre>–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–µ–º—É: <b>{data['tag']}</b></pre>",
                ]
            ),
        )
    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–µ–º—É.")
    await state.finish()
