import logging
import re
import os

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery

from keyboards.default.cancel_menu import cancel_menu

from keyboards.inline.callback_datas import tag_callback
from keyboards.inline.react_buttons import tag_choices

from filters.filters_admin import NotAdmin, IsAdmin
from loader import dp
from utils.db_api import db_commands as commands
from states.state_tag import TagState
from data.config import ADMIN


@dp.message_handler(text="–°–ø–∏—Å–æ–∫ —Ç–µ–º üìÅ")
async def show_tags(message: Message):
    """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ç–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    tags = await commands.get_all_tags(message.from_user.id)
    if tags:
        for tag in tags:
            await message.answer(
                text=str(tag),
                reply_markup=tag_choices,
            )
        return
    await message.answer(text="–°–ø–∏—Å–æ–∫ —Ç–µ–º –ø—É—Å—Ç!")
    logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —Ç–µ–º!")


@dp.message_handler(text="–°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤ üìÅ")
async def show_subs(message: Message):
    """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤."""
    subs = await commands.get_all_subscribers()
    if subs:
        for sub in subs:
            await message.answer(sub.username)
        return
    await message.answer(text="–ö–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤ –Ω–µ—Ç!")
    logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ä–µ–∫—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤.")


@dp.message_handler(IsAdmin(), text="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É üìÅ")
async def add_tags(message: Message):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É."""
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã:")
    await TagState.tag.set()


@dp.message_handler(IsAdmin(), state=TagState.tag)
async def get_tag(message: Message, state: FSMContext):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ–º—ã."""
    tag_title = message.text
    pattern = re.compile(
        "[A-–Ø–∞-—èA-z0-9@,.!? ]+"
    )
    if not re.fullmatch(pattern, tag_title):
        await message.answer(
            "–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã "
            + "(–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ [A-–Ø–∞-—èA-z0-9@,.!?]). "
            + "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É "
            + "–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É.",
            reply_markup=cancel_menu,
        )
        return
    await state.finish()
    tag = await commands.get_or_create_tag(tag_title)
    if tag is None:
        await message.answer(text="–¢–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞.")
        return
    await message.answer("–¢–µ–º–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


@dp.callback_query_handler(tag_callback.filter(operation="delete"))
async def buying_apples(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    tag = call.message.text
    await commands.delete_tags(tag)
    await call.message.delete()
    logging.info(f"{callback_data=}")
