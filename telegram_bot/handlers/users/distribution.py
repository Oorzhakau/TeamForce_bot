import asyncio
from aiogram import types
from aiogram.dispatcher import FSMContext
import logging

from keyboards.default.cancel_menu import cancel_menu
from keyboards.default.sub_menu import sub_menu

from filters.filters_admin import IsAdmin
from loader import dp
from utils.db_api import db_commands as commands
from data.config import ADMIN
from states.state_distrib import DistGroupState, DistSubState


loop = asyncio.get_event_loop()
coroutine = commands.get_user()
User = loop.run_until_complete(coroutine)


@dp.message_handler(IsAdmin(), text="–†–∞—Å—Å—ã–ª–∫–∞ –≥—Ä—É–ø–ø–µ üì©")
async def bot_message(message: types.Message):
    '''handler –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø–µ'''
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ <b>–≥—Ä—É–ø–ø—É</b> –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:"
    )
    await DistGroupState.group.set()


@dp.message_handler(IsAdmin(), state=DistGroupState.group)
async def bot_message(message: types.Message, state: FSMContext):
    '''handler –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø–µ.'''
    group = message.text
    if not await commands.check_exist_group(group):
        await message.answer(
            "–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã. "
            + "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É "
            + "–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É.",
            reply_markup=cancel_menu,
        )
        return
    await state.update_data(
        {"group": group}
    )
    await message.answer(f"<b>–ì—Ä—É–ø–ø–∞:</b>{group}\n–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    await DistGroupState.next()


@dp.message_handler(IsAdmin(), state=DistGroupState.message)
async def bot_message(message: types.Message, state: FSMContext):
    '''handler –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø–µ.'''
    text = message.text
    data = await state.get_data()
    subs = await commands.get_subs_in_group(data["group"])
    await commands.add_message(
        text=text,
        author=await commands.get_subscriber(User.user_id)
    )
    for sub in subs:
        await dp.bot.send_message(
            chat_id=sub.user_id,
            text='\n'.join(
                [
                    f"<b>–û—Ç –∫–æ–≥–æ</b>: {message.from_user.username}",
                    f"<pre>{text}</pre>"
                ]
            )
        )
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞–º!")
    await state.finish()


@dp.message_handler(IsAdmin(), text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é üì©")
async def bot_message(message: types.Message):
    '''handler –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.'''
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ <b>username</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
    )
    await DistSubState.sub.set()


@dp.message_handler(IsAdmin(), state=DistSubState.sub)
async def bot_message(message: types.Message, state: FSMContext):
    '''handler –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.'''
    username = message.text
    if not await commands.check_exist_username(username):
        await message.answer(
            "–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username. "
            + "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É "
            + "–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É.",
            reply_markup=cancel_menu,
        )
        return
    await state.update_data(
        {"username": username}
    )
    await message.answer(f"<b>–ö–æ–º—É:</b>{username}\n–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    await DistSubState.next()


@dp.message_handler(IsAdmin(), state=DistSubState.message)
async def bot_message(message: types.Message, state: FSMContext):
    '''handler –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.'''
    text = message.text
    data = await state.get_data()
    sub = await commands.get_subscriber_by_username(data["username"])
    await commands.add_message(
        text=text,
        author=await commands.get_subscriber(User.user_id)
    )
    await dp.bot.send_message(
        chat_id=sub.user_id,
        text='\n'.join(
            [
                f"<b>–û—Ç –∫–æ–≥–æ</b>: {message.from_user.username}",
                f"<pre>{text}</pre>"
            ]
        )
    )
    await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <b>{sub.username}</b>!")
    await state.finish()
