import logging

from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message

from filters.filters_admin import IsAdmin
from keyboards.default.cancel_menu import cancel_menu
from keyboards.inline.callback_datas import message_callback
from keyboards.inline.react_buttons import message_choices
from loader import dp
from states.state_sub import SelectMessageBySubState
from states.state_tag import SelectMessageByTagState
from utils.db_api import db_commands as commands


@dp.message_handler(IsAdmin(), text="–°–ø–∏—Å–æ–∫ c–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º—É üí¨")
async def select_tags(message: Message):
    """Handler –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–º—ã."""
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É")
    await SelectMessageByTagState.tag.set()


@dp.message_handler(IsAdmin(), state=SelectMessageByTagState.tag)
async def return_messages_with_tag(message: Message, state: FSMContext):
    """Handler –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ç–µ–º–æ–π."""
    tag = message.text
    if not await commands.check_exist_tag(tag):
        await message.answer(
            "–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã. "
            + "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É "
            + "–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É.",
            reply_markup=cancel_menu,
        )
        return
    messages = await commands.get_messages_with_tag(tag)
    if messages:
        for msg in messages:
            from_user = [
                str(msg.author.user_id),
                msg.author.username,
                msg.author.first_name,
                msg.author.last_name,
            ]
            from_user = " ".join(
                list(filter(lambda item: not (item is None), from_user))
            )
            await message.answer(
                text="\n".join(
                    [
                        f"<b>–û—Ç –∫–æ–≥–æ</b>: {from_user}",
                        f"<b>–¢–µ–º–∞</b>: {msg.tag}",
                        f"{msg.text}",
                    ]
                ),
                reply_markup=message_choices,
            )
        await state.finish()
        return
    await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Ç–µ–º—É <b>{tag}</b> –Ω–µ—Ç!")
    await state.finish()


@dp.message_handler(IsAdmin(), text="–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ üë®‚Äç‚öïÔ∏è")
async def select_sub(message: Message):
    """Handler –∑–∞–ø—Ä–æ—Å–∞ username."""
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ user_id:")
    await SelectMessageBySubState.sub.set()


@dp.message_handler(IsAdmin(), state=SelectMessageBySubState.sub)
async def return_messages_by_sub(message: Message, state: FSMContext):
    """Handler –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞."""
    user_id = int(message.text)
    if not await commands.check_exist_user_id(user_id):
        await message.answer(
            "–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username. "
            + "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É "
            + "–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É.",
            reply_markup=cancel_menu,
        )
        return
    messages = await commands.get_messages_from_sub_by_user_id(user_id)
    if messages:
        from_user = [
            str(messages[0].author.user_id),
            messages[0].author.username,
            messages[0].author.first_name,
            messages[0].author.last_name,
        ]
        from_user = " ".join(
            list(filter(lambda item: not (item is None), from_user))
        )
        for msg in messages:
            await message.answer(
                text="\n".join(
                    [
                        f"<b>–û—Ç –∫–æ–≥–æ</b>: {from_user}",
                        f"<b>–¢–µ–º–∞</b>: {msg.tag}",
                        f"{msg.text}",
                    ]
                ),
                reply_markup=message_choices,
            )
        await state.finish()
        return
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç!")
    await state.finish()


@dp.callback_query_handler(message_callback.filter(operation="delete"))
async def buying_apples(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f"{callback_data=}")
    text = call.message.text
    text = text.split("\n")[-1]
    await commands.delete_message_by_text(text)
    await call.message.delete()
